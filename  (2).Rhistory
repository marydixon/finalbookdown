summarize(meantmax = mean(tmax))
ggplot(winnewinter, mapping = aes(x = year, y = meantmax)) +
geom_point() +
theme_bw() +
labs(x = "year", y = "Tmax (°C)") +
geom_smooth(method = lm)
lm_wintertmax <- lm(meantmax ~ year, winnewinter)
summary(lm_wintertmax)
winnewinter$yearsq <- winnewinter$year^2
lm_wintertmaxquad <- lm(meantmax ~ year + yearsq, winnewinter)
summary(lm_wintertmaxquad)
winnewinter$fitted <- lm_wintertmaxquad$fitted.values
ggplot(winnewinter) +
geom_point(mapping = aes(x = year, y = meantmax)) +
geom_line(mapping = aes(x = year, y = fitted)) +
theme_bw() +
labs(x = "year", y = "tmax")
# set our API key with NASS
nassqs_auth(key = "08EB8353-3696-30D9-96D4-839C4DEA18B4")
# parameters to query on
params <- list(commodity_desc = "CORN", util_practice_desc = "GRAIN", prodn_practice_desc = "ALL PRODUCTION PRACTICES", year__GE = 1981, state_alpha = "IA")
# download
cornyieldsall <- nassqs_yields(params)
# set our API key with NASS
nassqs_auth(key = "08EB8353-3696-30D9-96D4-839C4DEA18B4")
# parameters to query on
params <- list(commodity_desc = "CORN", util_practice_desc = "GRAIN", prodn_practice_desc = "ALL PRODUCTION PRACTICES", year__GE = 1981, state_alpha = "IA")
# download
cornyieldsall <- nassqs_yields(params)
View(params)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(R.matlab) #pull in matlab file
library(rnassqs) #access to USDA NAS quick stats api, download data from USDA directly into R
library(ggthemes)
# daily max temperature
# dimensions: counties x days x years
prism <- readMat("data/prismiowa.mat")
# look at county #1
t_1981_c1 <- prism$tmaxdaily.iowa[1,,1]
t_1981_c1[366]
plot(1:366, t_1981_c1, type = "l")
ggplot() +
geom_line(mapping = aes(x=1:366, y = t_1981_c1)) +
theme_bw() +
xlab("day of year") +
ylab("daily maximum temperature (°C)") +
ggtitle("Daily Maximum Temperature, Iowa County #1")
# assign dimension names to tmax matrix
dimnames(prism$tmaxdaily.iowa) <- list(prism$COUNTYFP, 1:366, prism$years)
#wants a list corresponding to different dimensions - first dim is county code (FP code)
# converted 3d matrix into a data frame
tmaxdf <- as.data.frame.table(prism$tmaxdaily.iowa)
# relabel the columns
colnames(tmaxdf) <- c("countyfp","doy","year","tmax")
tmaxdf <- tibble(tmaxdf)
tmaxdf$doy <- as.numeric(tmaxdf$doy)
tmaxdf$year <- as.numeric(as.character(tmaxdf$year))
winnesummer <- tmaxdf %>%
filter(countyfp==191 & doy >= 152 & doy <= 243) %>%
group_by(year) %>%
summarize(meantmax = mean(tmax))
ggplot(winnesummer, mapping = aes(x = year, y = meantmax)) +
geom_point() +
theme_bw() +
labs(x = "year", y = "Tmax (°C)") +
geom_smooth(method = lm)
lm_summertmax <- lm(meantmax ~ year, winnesummer)
summary(lm_summertmax)
winnewinter <- tmaxdf %>%
filter(countyfp==191 & doy <= 59 | doy >= 335 & !is.na(tmax)) %>%
group_by(year) %>%
summarize(meantmax = mean(tmax))
ggplot(winnewinter, mapping = aes(x = year, y = meantmax)) +
geom_point() +
theme_bw() +
labs(x = "year", y = "Tmax (°C)") +
geom_smooth(method = lm)
lm_wintertmax <- lm(meantmax ~ year, winnewinter)
summary(lm_wintertmax)
winnewinter$yearsq <- winnewinter$year^2
lm_wintertmaxquad <- lm(meantmax ~ year + yearsq, winnewinter)
summary(lm_wintertmaxquad)
winnewinter$fitted <- lm_wintertmaxquad$fitted.values
ggplot(winnewinter) +
geom_point(mapping = aes(x = year, y = meantmax)) +
geom_line(mapping = aes(x = year, y = fitted)) +
theme_bw() +
labs(x = "year", y = "tmax")
# set our API key with NASS
nassqs_auth(key = "08EB8353-3696-30D9-96D4-839C4DEA18B4")
# parameters to query on
params <- list(commodity_desc = "CORN", util_practice_desc = "GRAIN", prodn_practice_desc = "ALL PRODUCTION PRACTICES", year__GE = 1981, state_alpha = "IA")
# download
cornyieldsall <- nassqs_yields(params)
# set our API key with NASS
nassqs_auth(key = "08EB8353-3696-30D9-96D4-839C4DEA18B4")
# parameters to query on
params <- list(commodity_desc = "CORN", util_practice_desc = "GRAIN", prodn_practice_desc = "ALL PRODUCTION PRACTICES", year__GE = 1981, state_alpha = "IA")
# download
cornyieldsall <- nassqs_yields(params)
# set our API key with NASS
nassqs_auth(key = "08EB8353-3696-30D9-96D4-839C4DEA18B4")
# parameters to query on
params <- list(commodity_desc = "CORN", util_practice_desc = "GRAIN", prodn_practice_desc = "ALL PRODUCTION PRACTICES", year__GE = 1981, state_alpha = "IA")
# download
cornyieldsall <- nassqs_yields(params)
cornyieldsall$county_ansi <- as.numeric(cornyieldsall$county_ansi)
cornyieldsall$yield <- as.numeric(cornyieldsall$Value)
# clean and filter this dataset
cornyields <- select(cornyieldsall, county_ansi, county_name, yield, year) %>%
filter(!is.na(county_ansi) & !is.na(yield))
cornyields <- tibble(cornyields)
winnecorn <- cornyields %>%
filter(county_ansi==191)
ggplot(winnecorn, mapping = aes(x = year, y = yield)) +
geom_point() +
labs(x = "Year", y = "Yield (bu/acre)", title = "Winneshiek Corn Yield over Time") +
geom_smooth(method = lm) +
theme_bw()
lm_winnecorn <- lm(yield ~ year, winnecorn)
summary(lm_winnecorn)
winnecorn$yearsq <- winnecorn$year^2
lm_winnecornquad <- lm(yield ~ year + yearsq, winnecorn)
summary(lm_winnecornquad)
winnecorn$fitted <- lm_winnecornquad$fitted.values
ggplot(winnecorn) +
geom_point(mapping = aes(x = year, y = yield)) +
geom_line(mapping = aes(x = year, y = fitted)) +
theme_bw() +
labs(x = "Year", y = "Yield (bu/acre)", title = "Quadratic Time Trend for Corn Yield")
ggplot(winnecorn) +
geom_point(mapping = aes(x = year, y = yield)) +
geom_smooth(mapping = aes(x = year, y = fitted), method = lm) +
theme_bw() +
labs(x = "Year", y = "Yield (bu/acre)", title = "Quadratic Time Trend for Corn Yield")
summercorn <- inner_join(winnecorn,winnesummer, by = 'year')
summercorn$meantmaxsq <- summercorn$meantmax^2
lm_summercorn_single <- lm(yield ~ meantmax, summercorn)
summary(lm_summercorn_single)
summercorn$fittedsingle <- lm_summercorn_single$fitted.values
lm_summercorn_quad <- lm(yield ~ meantmax + meantmaxsq, summercorn)
summary(lm_summercorn_quad)
summercorn$fittedquad <- lm_summercorn_quad$fitted.values
lm_summercorn_year <- lm(yield ~ meantmax + year, summercorn)
summary(lm_summercorn_year)
summercorn$fittedyear <- lm_summercorn_year$fitted.values
lm_summercorn <- lm(yield ~ meantmax + year + meantmaxsq, summercorn)
summary(lm_summercorn)
summercorn$fitted <- lm_summercorn$fitted.values
lm_summercorn_single <- lm(yield ~ meantmax, summercorn)
summary(lm_summercorn_single)
summercorn$fittedsingle <- lm_summercorn_single$fitted.values
lm_summercorn_quad <- lm(yield ~ meantmax + meantmaxsq, summercorn)
summary(lm_summercorn_quad)
summercorn$fittedquad <- lm_summercorn_quad$fitted.values
lm_summercorn_year <- lm(yield ~ meantmax + year, summercorn)
summary(lm_summercorn_year)
summercorn$fittedyear <- lm_summercorn_year$fitted.values
lm_summercorn <- lm(yield ~ meantmax + year + meantmaxsq, summercorn)
summary(lm_summercorn)
summercorn$fitted <- lm_summercorn$fitted.values
yield <- cornyieldsall %>%
filter(year == 2018) %>%
group_by(county_name) %>%
unique() %>%
filter(!is.na(county_ansi))
temp <- tmaxdf %>%
group_by(countyfp) %>%
filter(year == 2018) %>%
filter(doy >= 152 & doy <= 243) %>%
summarize(meantmax = mean(tmax)) %>%
rename(county_ansi = "countyfp")
temp$county_ansi <- as.numeric(as.character(temp$county_ansi))
summeryield <- left_join(yield, temp, by='county_ansi') %>%
select(., county_ansi, county_name, yield, meantmax)
lm_summeryield <- lm(yield ~ meantmax, summeryield)
summary(lm_summeryield)
summeryield$meantmaxsq <- summeryield$meantmax^2
lm_summeryield_quad <- lm(yield ~ meantmax + meantmaxsq, summeryield)
summary(lm_summeryield_quad)
summeryield$fitted <- lm_summeryield_quad$fitted.values
ggplot(summeryield, mapping = aes(x = meantmax, y = yield)) +
geom_point() +
labs(x = "Mean Max Temperature (°C)", y = "Yield (bu/acre)", title = "Corn Yield and Mean Maximum Summer Temperature in 2018") +
geom_smooth(method = lm) +
theme_bw()
ggplot(summeryield) +
geom_point(mapping = aes(x = meantmax, y = yield)) +
geom_line(mapping = aes(x = meantmax, y = fitted)) +
theme_bw() +
labs(x = "Mean Max Temperature (°C)", y = "Yield (bu/acre)", title = "Quadratic Temperature Trend for Corn Yield in 2018")
ggplot(summeryield) +
geom_point(mapping = aes(x = meantmax, y = yield)) +
geom_smooth(mapping = aes(x = meantmax, y = fitted), method = lm) +
theme_bw() +
labs(x = "Mean Max Temperature (°C)", y = "Yield (bu/acre)", title = "Quadratic Temperature Trend for Corn Yield in 2018")
ggplot(summeryield) +
geom_point(mapping = aes(x = meantmax, y = yield)) +
geom_line(mapping = aes(x = meantmax, y = fitted)) +
theme_bw() +
labs(x = "Mean Max Temperature (°C)", y = "Yield (bu/acre)", title = "Quadratic Temperature Trend for Corn Yield in 2018")
ggplot(summeryield) +
geom_point(mapping = aes(x = meantmax, y = yield)) +
geom_smooth(mapping = aes(x = meantmax, y = fitted), method = lm) +
theme_bw() +
labs(x = "Mean Max Temperature (°C)", y = "Yield (bu/acre)", title = "Quadratic Temperature Trend for Corn Yield in 2018")
library(tidyverse) # Tidy packages
library(sf) #Spatial package that can read and create shapefiles
library(mapview); mapviewOptions(fgb = F) #Interactive maps
library(LAGOSNE) #Lots and lots of clean lake data
library(USAboundaries) #USA states and counties
# #Lagos download script
#LAGOSNE::lagosne_get(dest_folder = LAGOSNE:::lagos_path())
#Load in lagos
lagos <- lagosne_load()
#Grab the lake centroid info
lake_centers <- lagos$locus
#Look at the column names
#names(lake_centers)
#Look at the structure
#str(lake_centers)
#View the full dataset
#View(lake_centers %>% slice(1:100))
spatial_lakes <- st_as_sf(lake_centers,coords=c('nhd_long','nhd_lat'),
crs=4326) %>%
st_transform(2163)
#Subset for plotting
subset_spatial <- spatial_lakes %>%
slice(1:100)
subset_baser <- spatial_lakes[1:100,]
#Dynamic mapviewer
mapview(subset_spatial, canvas = T)
states <- us_states()
#Plot all the states to check if they loaded
#mapview(states)
minnesota <- states %>%
filter(name == 'Minnesota') %>%
st_transform(2163)
#Subset lakes based on spatial position
minnesota_lakes <- spatial_lakes[minnesota,] %>%
mutate(state = 'Minnesota')
#Plotting the first 1000 lakes
minnesota_lakes %>%
arrange(-lake_area_ha) %>%
slice(1:1000) %>%
mapview(.,zcol = 'lake_area_ha')
iowa <- states %>%
filter(name == 'Iowa') %>%
st_transform(2163)
illinois <- states %>%
filter(name == 'Illinois') %>%
st_transform(2163)
iowa_lakes <- spatial_lakes[iowa,] %>%
mutate(state = 'Iowa') %>%
arrange(lake_area_ha)
illinois_lakes <- spatial_lakes[illinois,] %>%
mutate(state = 'Illinois')%>%
arrange(lake_area_ha)
mapview(iowa)
mapview(illinois)
mapview(iowa_lakes, canvas = T, zcol = 'lake_area_ha', layer.name = 'Lake Area (ha)')
mapview(illinois_lakes, canvas = T, zcol = 'lake_area_ha', layer.name = 'Lake Area (ha)')
iowa_illinois<- rbind(iowa_lakes,illinois_lakes)
nrow(iowa_illinois)
nrow(minnesota_lakes)
iowa_minnesota <- rbind(iowa_lakes,minnesota_lakes)
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state, position = "dodge")) +
geom_histogram() +
scale_x_log10() +
labs(x = 'Log of Lake Size (ha)', y = 'Frequency', title = 'Distribution of Lake Sizes in Iowa and Minnesota')
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state, position = "stack")) +
geom_histogram() +
scale_x_log10() +
labs(x = 'Log of Lake Size (ha)', y = 'Frequency', title = 'Distribution of Lake Sizes in Iowa and Minnesota')
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state, position = "dodge")) +
geom_histogram() +
scale_x_log10() +
labs(x = 'Log of Lake Size (ha)', y = 'Frequency', title = 'Distribution of Lake Sizes in Iowa and Minnesota')
ggplot(iowa_minnesota, aes(lake_area_ha)) +
geom_histogram(fill = state, position = "dodge") +
scale_x_log10() +
labs(x = 'Log of Lake Size (ha)', y = 'Frequency', title = 'Distribution of Lake Sizes in Iowa and Minnesota')
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
scale_x_log10() +
labs(x = 'Log of Lake Size (ha)', y = 'Frequency', title = 'Distribution of Lake Sizes in Iowa and Minnesota')
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
scale_x_log10() +
theme_classic()
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
scale_x_log10() +
theme_update()
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
scale_x_log10() +
theme_linedraw()
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
scale_x_log10() +
theme_bw()
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
scale_x_log10() +
theme_bw() +
ggthemes(few)
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
scale_x_log10() +
theme_bw() +
scale_color_brewer(palette = 'blues')+
labs(x = 'Log of Lake Size (ha)', y = 'Frequency', title = 'Distribution of Lake Sizes in Iowa and Minnesota')
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
scale_x_log10() +
theme_bw() +
scale_color_brewer(palette = 'Blues') +
labs(x = 'Log of Lake Size (ha)', y = 'Frequency', title = 'Distribution of Lake Sizes in Iowa and Minnesota')
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
scale_x_log10() +
#theme_bw() +
scale_color_brewer(palette = 'Blues') +
labs(x = 'Log of Lake Size (ha)', y = 'Frequency', title = 'Distribution of Lake Sizes in Iowa and Minnesota')
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
scale_x_log10() +
theme_bw() +
labs(x = 'Log of Lake Size (ha)', y = 'Frequency', title = 'Distribution of Lake Sizes in Iowa and Minnesota') +
scale_color_few() +
theme(legend.position=c(0.8,0.8)) +
theme(legend.title = element_blank())
library(tidyverse) # Tidy packages
library(sf) #Spatial package that can read and create shapefiles
library(mapview); mapviewOptions(fgb = F) #Interactive maps
library(LAGOSNE) #Lots and lots of clean lake data
library(USAboundaries) #USA states and counties
# #Lagos download script
#LAGOSNE::lagosne_get(dest_folder = LAGOSNE:::lagos_path())
#Load in lagos
lagos <- lagosne_load()
#Grab the lake centroid info
lake_centers <- lagos$locus
#Look at the column names
#names(lake_centers)
#Look at the structure
#str(lake_centers)
#View the full dataset
#View(lake_centers %>% slice(1:100))
spatial_lakes <- st_as_sf(lake_centers,coords=c('nhd_long','nhd_lat'),
crs=4326) %>%
st_transform(2163)
#Subset for plotting
subset_spatial <- spatial_lakes %>%
slice(1:100)
subset_baser <- spatial_lakes[1:100,]
#Dynamic mapviewer
mapview(subset_spatial, canvas = T)
states <- us_states()
#Plot all the states to check if they loaded
#mapview(states)
minnesota <- states %>%
filter(name == 'Minnesota') %>%
st_transform(2163)
#Subset lakes based on spatial position
minnesota_lakes <- spatial_lakes[minnesota,] %>%
mutate(state = 'Minnesota')
#Plotting the first 1000 lakes
minnesota_lakes %>%
arrange(-lake_area_ha) %>%
slice(1:1000) %>%
mapview(.,zcol = 'lake_area_ha')
iowa <- states %>%
filter(name == 'Iowa') %>%
st_transform(2163)
illinois <- states %>%
filter(name == 'Illinois') %>%
st_transform(2163)
iowa_lakes <- spatial_lakes[iowa,] %>%
mutate(state = 'Iowa') %>%
arrange(lake_area_ha)
illinois_lakes <- spatial_lakes[illinois,] %>%
mutate(state = 'Illinois')%>%
arrange(lake_area_ha)
mapview(iowa)
mapview(illinois)
mapview(iowa_lakes, canvas = T, zcol = 'lake_area_ha', layer.name = 'Lake Area (ha)')
mapview(illinois_lakes, canvas = T, zcol = 'lake_area_ha', layer.name = 'Lake Area (ha)')
iowa_illinois<- rbind(iowa_lakes,illinois_lakes)
nrow(iowa_illinois)
nrow(minnesota_lakes)
iowa_minnesota <- rbind(iowa_lakes,minnesota_lakes)
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
scale_x_log10() +
theme_bw() +
labs(x = 'Log of Lake Size (ha)', y = 'Frequency', title = 'Distribution of Lake Sizes in Iowa and Minnesota') +
scale_color_few() +
theme(legend.position=c(0.8,0.8)) +
theme(legend.title = element_blank())
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
scale_x_log10() +
theme_bw() +
labs(x = 'Log of Lake Size (ha)', y = 'Frequency', title = 'Distribution of Lake Sizes in Iowa and Minnesota') +
ggthemes::scale_color_few() +
theme(legend.position=c(0.8,0.8)) +
theme(legend.title = element_blank())
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
scale_x_log10() +
theme_bw() +
labs(x = 'Log of Lake Size (ha)', y = 'Frequency', title = 'Distribution of Lake Sizes in Iowa and Minnesota') +
#ggthemes::scale_color_few() +
theme(legend.position=c(0.8,0.8)) +
theme(legend.title = element_blank())
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
scale_color_few()
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
ggthemes::scale_color_few()
iowa_minnesota <- rbind(iowa_lakes,minnesota_lakes)
ggplot(iowa_minnesota, aes(lake_area_ha, fill = state)) +
geom_histogram(position = "dodge") +
scale_x_log10() +
theme_bw() +
labs(x = 'Log of Lake Size (ha)', y = 'Frequency', title = 'Distribution of Lake Sizes in Iowa and Minnesota') +
theme(legend.position=c(0.8,0.8)) +
theme(legend.title = element_blank())
lake_area_states <- iowa_illinois %>%
mutate(log10_lake_area = log(lake_area_ha)) %>%
arrange(log10_lake_area)
mapview(lake_area_states, canvas = T, zcol = 'log10_lake_area', layer.name = 'Log 10 of the Lake Area (ha)')
library(tidyverse) # Tidy packages
library(sf) #Spatial package that can read and create shapefiles
library(mapview) #Interactive maps
library(LAGOSNE) #Lots and lots of clean lake data
library(USAboundaries) #USA states and counties
library(lubridate) #For dealing with date and time
#Lagos download script
#lagosne_get(dest_folder = LAGOSNE:::lagos_path(),overwrite=T)
#Load in lagos
lagos <- lagosne_load()
#Grab the lake centroid info
lake_centers <- lagos$locus
# Make an sf object
spatial_lakes <- st_as_sf(lake_centers,coords=c('nhd_long','nhd_lat'),
crs=4326)
#Grab the water quality data
nutr <- lagos$epi_nutr
#Look at column names
#names(nutr)
clarity_only <- nutr %>%
select(lagoslakeid,sampledate,chla,doc,secchi) %>%
mutate(sampledate = as.character(sampledate) %>% ymd(.))
#Look at the number of rows of dataset
#nrow(clarity_only)
chla_secchi <- clarity_only %>%
filter(!is.na(chla),
!is.na(secchi))
# How many observatiosn did we lose?
# nrow(clarity_only) - nrow(chla_secchi)
# Keep only the lakes with at least 200 observations of secchi and chla
chla_secchi_200 <- chla_secchi %>%
group_by(lagoslakeid) %>%
mutate(count = n()) %>%
filter(count > 200)
spatial_200 <- inner_join(spatial_lakes,chla_secchi_200 %>%
distinct(lagoslakeid,.keep_all=T),
by='lagoslakeid')
### Take the mean chl_a and secchi by lake
mean_values_200 <- chla_secchi_200 %>%
# Take summary by lake id
group_by(lagoslakeid) %>%
# take mean chl_a per lake id
summarize(mean_chl = mean(chla,na.rm=T),
mean_secchi=mean(secchi,na.rm=T)) %>%
#Get rid of NAs
filter(!is.na(mean_chl),
!is.na(mean_secchi)) %>%
# Take the log base 10 of the mean_chl
mutate(log10_mean_chl = log10(mean_chl))
#Join datasets
mean_spatial <- inner_join(spatial_lakes,mean_values_200,
by='lagoslakeid')
#Make a map
mapview(mean_spatial,zcol='log10_mean_chl')
ggplot(mean_values_200,aes(x = mean_chl, y = mean_secchi)) +
geom_point() +
geom_smooth(method='lm', formula= y~x) +
ggthemes::theme_few() +
labs(x = "Mean Chlorophyll", y = "Mean Secchi Disk Depth", title = "Correlation between Secchi Disk Depth and Chlorophyll")
cor(mean_values_200$mean_chl,mean_values_200$mean_secchi)
View(spatial_200)
View(chla_secchi)
View(spatial_lakes)
View(nutr)
View(clarity_only)
ggplot(mean_values_200,aes(x = mean_chl, y = mean_secchi)) +
geom_point() +
geom_smooth(method='lm', formula= y~x) +
ggthemes::theme_few() +
labs(x = "Mean Chlorophyll (mg/L)", y = "Mean Secchi Disk Depth (m)", title = "Correlation between Secchi Disk Depth and Chlorophyll")
cor(mean_values_200$mean_chl,mean_values_200$mean_secchi)
spatial_lakes <-lake_centers %>%
group_by(lagoslakeid,nhd_long,nhd_lat) %>%
count() %>%
st_as_sf(.,coords=c('nhd_long','nhd_lat'),
crs=4326)
